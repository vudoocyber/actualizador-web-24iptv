import requests
import os
import json
from datetime import datetime
from zoneinfo import ZoneInfo
import re
import random # Importamos la librer√≠a random para elegir un formato aleatorio

# --- Mapeo de meses para evitar errores de localidad ---
MESES_ESPANOL = {
    'enero': '01', 'febrero': '02', 'marzo': '03', 'abril': '04',
    'mayo': '05', 'junio': '06', 'julio': '07', 'agosto': '08',
    'septiembre': '09', 'octubre': '10', 'noviembre': '11', 'diciembre': '12'
}

# --- CONFIGURACI√ìN Y SECRETS ---
BOT_TOKEN = os.environ.get("TELEGRAM_BOT_TOKEN")
CHAT_ID = os.environ.get("TELEGRAM_CHAT_ID")
URL_VALIDACION = os.environ.get("URL_EVENTOS_JSON") # events.json para fecha
URL_RANKING = os.environ.get("URL_RANKING_JSON")     # eventos-relevantes.json
MEXICO_TZ = ZoneInfo(os.environ.get("TZ", "America/Mexico_City")) 
HEADERS = {'User-Agent': 'Mozilla/5.0 (compatible; Script/1.0)'}


# --- NUEVAS VARIABLES DE MENSAJE DIN√ÅMICO (10 Plantillas) ---
# Usaremos {organizador}, {competidores}, {detalle_partido}, {horarios}, {canales}
# como placeholders dentro de cada plantilla.
MENSAJE_PLANTILLAS = [
    # 1. √ânfasis en lo imperdible
    {
        "titulo": "üî• *¬°EVENTO IMPERDIBLE DEL D√çA!* üî•",
        "cuerpo": "üèÜ Encuentro: *{competidores}*\nüèüÔ∏è Sede: {detalle_partido}\n‚è∞ Horario: *{horarios}*\nüì∫ Canales: _{canales}_",
        "cierre": "‚ö° *¬°M√°xima adrenalina!* Mira la acci√≥n aqu√≠:\n"
    },
    # 2. √ânfasis en la competencia
    {
        "titulo": "üö® *ALERTA DE COMPETENCIA √âPICA* üö®",
        "cuerpo": "*{organizador}*\nüÜö Partido: *{competidores}*\nüìç Ubicaci√≥n: {detalle_partido}\nüïì Hora CDMX/MEX: *{horarios}*\nüì° Transmisi√≥n: _{canales}_",
        "cierre": "üì≤ No te quedes fuera. ¬°Sintoniza ya!:\n"
    },
    # 3. Formato de recordatorio r√°pido
    {
        "titulo": "üîî *RECORDATORIO: ¬°A JUGAR!* üîî",
        "cuerpo": "‚öΩ *{competidores}* ‚Äî Hoy\n‚è±Ô∏è Horarios: *{horarios}*\nüé• D√≥nde Verlo: _{canales}_",
        "cierre": "üîó Todos los detalles en nuestra web:\n"
    },
    # 4. Formato de Noticia de √öltima Hora
    {
        "titulo": "üì∞ *HOY EN EL DEPORTE: ¬°EVENTAZO!* üì∞",
        "cuerpo": "*{organizador}*\nüí• Enfrentamiento: *{competidores}*\nüåé Zona Horaria: *{horarios}*\n¬°En vivo por! _{canales}_",
        "cierre": "‚û°Ô∏è Acceso directo y horarios locales:\n"
    },
    # 5. Estilo "Vibrante"
    {
        "titulo": "ü§© *¬°VIBRA CON EL PARTIDO ESTELAR!* ü§©",
        "cuerpo": "‚öΩ Evento: *{competidores}*\nüóìÔ∏è Fecha: {detalle_partido}\n‚åö ¬°Prepara el reloj! *{horarios}*\nüì∫ Velo en HD: _{canales}_",
        "cierre": "üî• ¬°La emoci√≥n est√° asegurada! M√≠ralo aqu√≠:\n"
    },
    # 6. Estilo "Faltan Pocas Horas"
    {
        "titulo": "‚è≥ *FALTAN POCAS HORAS PARA...* ‚è≥",
        "cuerpo": "*{organizador}*\nüëä Duelo: *{competidores}*\nüèüÔ∏è Sede: {detalle_partido}\n‚è±Ô∏è Comienza: *{horarios}*\nüì∫ Canales: _{canales}_",
        "cierre": "üöÄ ¬°Despegamos! Link r√°pido:\n"
    },
    # 7. Formato con ubicaci√≥n
    {
        "titulo": "üìç *¬øD√ìNDE EST√Å LA ACCI√ìN HOY?* üìç",
        "cuerpo": "*{organizador}*\nüèüÔ∏è Desde el {detalle_partido}\n‚öîÔ∏è Batalla: *{competidores}*\n‚è∞ Horario Principal: *{horarios}*\nüì∫ M√∫ltiples Canales: _{canales}_",
        "cierre": "üåê Toda la programaci√≥n:\n"
    },
    # 8. √ânfasis en el canal
    {
        "titulo": "üì∫ *GU√çA R√ÅPIDA DE TRANSMISI√ìN* üì∫",
        "cuerpo": "*{organizador}* - *{competidores}*\nüïê Horario: *{horarios}*\nü•á Canales destacados: _{canales}_",
        "cierre": "üëá Haz click para ver la lista completa de canales:\n"
    },
    # 9. Estilo "Cl√°sico"
    {
        "titulo": "‚≠ê *DESTACADO DEL D√çA* ‚≠ê",
        "cuerpo": "üèÜ Encuentro: *{competidores}*\nüèüÔ∏è Sede: {detalle_partido}\n‚è∞ Horario: *{horarios}*\nüì∫ Canales: _{canales}_",
        "cierre": "‚û°Ô∏è ¬°No te lo pierdas! Mira la acci√≥n aqu√≠:\n"
    },
    # 10. Estilo "Deportivo"
    {
        "titulo": "‚öΩ *EL PARTIDO M√ÅS ESPERADO* üèÄ",
        "cuerpo": "*{organizador}*\nüèÜ Competencia: *{competidores}*\n‚è±Ô∏è Horario de inicio: *{horarios}*\nüì° Cobertura total: _{canales}_",
        "cierre": "¬°Prep√°rate! Enlace a la gu√≠a completa:\n"
    }
]

def validar_fecha_actualizacion(url_json):
    """
    Descarga el JSON de eventos principal y verifica que la fecha_actualizacion 
    corresponda al d√≠a de hoy en la Ciudad de M√©xico.
    """
    try:
        respuesta = requests.get(url_json, headers=HEADERS, timeout=10)
        respuesta.raise_for_status()
        datos = respuesta.json()
        
        fecha_str = datos.get("fecha_actualizacion")
        
        if not fecha_str:
            print("Validaci√≥n fallida: El campo 'fecha_actualizacion' no se encontr√≥ en el JSON.")
            return False

        # Parseamos la fecha ISO: "2025-10-18T22:17:57.638086"
        fecha_actualizacion = datetime.fromisoformat(fecha_str).date()
        
        # Obtenemos la fecha de hoy en CDMX para la comparaci√≥n
        hoy_mx = datetime.now(MEXICO_TZ).date()
        
        if fecha_actualizacion == hoy_mx:
            print(f"Validaci√≥n de fecha exitosa: {fecha_actualizacion} coincide con hoy ({hoy_mx}).")
            return True
        else:
            print(f"Validaci√≥n de fecha fallida: Mensaje desactualizado. JSON: {fecha_actualizacion} | Hoy: {hoy_mx}.")
            return False

    except requests.exceptions.RequestException as e:
        print(f"Error al acceder al JSON de validaci√≥n en {url_json}: {e}")
        return False
    except Exception as e:
        print(f"Error durante la validaci√≥n de fecha: {e}")
        return False


def obtener_eventos_rankeados(url_ranking):
    """
    Descarga el JSON de ranking y devuelve la lista de eventos, usando la clave correcta.
    """
    try:
        respuesta = requests.get(url_ranking, headers=HEADERS, timeout=10)
        respuesta.raise_for_status()
        datos = respuesta.json()
        
        # Buscamos la clave 'eventos_relevantes'
        eventos = datos.get("eventos_relevantes", []) 
        
        print(f"Obtenidos {len(eventos)} eventos rankeados.")
        return eventos

    except requests.exceptions.RequestException as e:
        print(f"Error al acceder al JSON de ranking en {url_ranking}: {e}")
        return []
    except Exception as e:
        print(f"Error al parsear el JSON de ranking: {e}")
        return []


def formatear_mensaje_telegram(evento):
    """
    Crea un mensaje atractivo en formato Markdown para Telegram, seleccionando una 
    plantilla de mensaje aleatoria.
    """
    # Escapamos caracteres especiales de Markdown
    def escape_markdown(text):
        # Escapamos los caracteres que Telegram podr√≠a interpretar como formato
        return re.sub(r'([\[\]()~`>#+\-=|{}.!])', r'\\\1', text)

    # Obtenemos la informaci√≥n del primer partido (que es el evento rankeado)
    if evento.get('partidos'):
        partido_principal = evento['partidos'][0]
    else:
        partido_principal = evento 

    # Extracci√≥n y limpieza segura de datos (aplicando escape al extraer)
    horarios = escape_markdown(partido_principal.get('horarios', 'Sin hora'))
    canales = escape_markdown(", ".join(partido_principal.get('canales', ['Canal Desconocido'])))
    competidores = escape_markdown(" vs ".join(partido_principal.get('competidores', ['Competidores'])))
    organizador = escape_markdown(evento.get('evento_principal', 'Evento Deportivo'))
    detalle_partido = escape_markdown(partido_principal.get('detalle_partido', 'Ubicaci√≥n Desconocida'))
    
    # 1. SELECCIONAR PLANTILLA ALEATORIA
    plantilla = random.choice(MENSAJE_PLANTILLAS)
    
    # 2. CONSTRUIR CUERPO DEL MENSAJE (Sustituci√≥n de placeholders)
    # Rellenamos los placeholders con los datos de escape_markdown ya aplicados
    cuerpo_dinamico = plantilla["cuerpo"].format(
        organizador=organizador,
        competidores=competidores,
        detalle_partido=detalle_partido,
        horarios=horarios,
        canales=canales
    )
    
    # 3. CONSTRUCCI√ìN FINAL
    mensaje = (
        f"{plantilla['titulo']}\n\n"
        f"{cuerpo_dinamico}\n\n"
        f"{plantilla['cierre']}"
        f"https://24hometv.xyz/"
    )
    return mensaje


def enviar_mensaje_telegram(token, chat_id, mensaje):
    """
    Env√≠a un mensaje individual a Telegram.
    """
    if not token or not chat_id:
        print("Error: El token del bot o el ID del chat no est√°n configurados.")
        return False
    
    url_api = f"https://api.telegram.org/bot{token}/sendMessage"
    
    payload = {
        'chat_id': chat_id,
        'text': mensaje,
        'parse_mode': 'Markdown' 
    }
    
    try:
        # Usamos 'json=payload' para la codificaci√≥n UTF-8
        respuesta = requests.post(url_api, json=payload) 
        respuesta.raise_for_status()
        
        if respuesta.json().get('ok'):
            print("Mensaje enviado a Telegram con √©xito.")
            return True
        else:
             print(f"Fallo al enviar mensaje: {respuesta.json().get('description')}")
             return False
    except requests.exceptions.RequestException as e:
        print(f"Error al enviar el mensaje a Telegram: {e}")
        return False


def main():
    if not (BOT_TOKEN and CHAT_ID and URL_VALIDACION and URL_RANKING):
        print("ERROR CR√çTICO: Faltan secretos de configuraci√≥n (Telegram/URLs). Proceso detenido.")
        return

    print("--- INICIANDO PROCESO DE ENV√çO DE EVENTOS RANKADOS ---")
    
    # 1. VALIDACI√ìN DE FECHA
    if not validar_fecha_actualizacion(URL_VALIDACION):
        print("La fecha del JSON principal no es la de hoy. Deteniendo el env√≠o.")
        return
    
    # 2. OBTENCI√ìN DE EVENTOS
    eventos = obtener_eventos_rankeados(URL_RANKING)
    
    if not eventos:
        print("No se encontraron eventos rankeados para enviar. Proceso finalizado.")
        return
        
    # 3. ENV√çO DE MENSAJES INDIVIDUALES
    print(f"Encontrados {len(eventos)} eventos. Iniciando env√≠o...")
    
    mensajes_enviados = 0
    for i, evento in enumerate(eventos[:3]): # Limitamos a los 3 primeros
        mensaje_markdown = formatear_mensaje_telegram(evento)
        
        print(f"Enviando Evento {i+1}...")
        if enviar_mensaje_telegram(BOT_TOKEN, CHAT_ID, mensaje_markdown):
            mensajes_enviados += 1
        else:
            print(f"Fallo en el env√≠o del evento {i+1}.")
            
    print(f"--- PROCESO FINALIZADO. Mensajes enviados: {mensajes_enviados} ---")


if __name__ == "__main__":
    main()
